package UserInterface;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.border.LineBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import UserInterface.PositionButton;

import Game.ChessGame;
import Piece.*;
import Util.Position;

/**
 * User interface for the chess application
 * Code reference from: http://stackoverflow.com/questions/21142686/making-a-robust-resizable-swing-chess-gui
 */
public class UserInterface {
    private int NUMCOL = 8;
    private int COLLENGTH = 60;
    private int NUMROW = 8;
    private int ROWLENGTH = 60;
    private JPanel gui = new JPanel(new BorderLayout(3, 3));
    private JPanel chessBoard;
    private PositionButton[][] chessBoardGrid;
    private Image[][] chessPiecesImages = new Image[2][6];
    private PositionButton currentPositionButton = null;
    private ChessGame game;
    private JFrame frame;


    private final JLabel message = new JLabel("Ready to start the game. White's turn");

    public static final int WHITE = 0, BLACK = 1;
    public static final int QUEEN = 0, KING = 1, ROOK = 2, KNIGHT = 3, BISHOP = 4, PAWN = 5;
    public static final int[] STARTING_ROW = {
            ROOK, KNIGHT, BISHOP, KING, QUEEN, BISHOP, KNIGHT, ROOK
    };

    /**
     * Default constructor
     */
    public UserInterface() throws Exception {
        this.chessBoardGrid = new PositionButton[NUMROW][NUMCOL];
        this.game = new ChessGame();
        this.createBoard();
    }


    /**
     * Initializes the Frame
     */
    public void createBoard() throws Exception {
        //Loads the images from the folder
        this.initializeImages();

        //Setup the GUI
        gui.setBorder(new EmptyBorder(5, 5, 5, 5));
        JToolBar tools = new JToolBar();
        tools.setFloatable(false);
        gui.add(tools, BorderLayout.PAGE_START);
        Action startGameAction = new AbstractAction("Start") {

            @Override
            public void actionPerformed(ActionEvent e) {
                setupBoardPieces();
            }

        };
        // setup the toolbar
        tools.add(startGameAction);
        Action resetGame = new AbstractAction("Restart") {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                try {
                    System.out.println("Restart");
                    game.resetGame();
                    resetFrame();

                } catch (Exception e) {
                    e.printStackTrace();
                    System.out.println("caught");
                }
            }
        };
        tools.add(resetGame);

        tools.add(new JButton("Forfeit"));
        tools.addSeparator();
        tools.add(message);

        chessBoard = new JPanel(new GridLayout(0, 8)) {

            /**
             * Override the preferred size to return the largest it can, in
             * a square shape.  Must (must, must) be added to a GridBagLayout
             * as the only component (it uses the parent as a guide to size)
             * with no GridBagConstaint (so it is centered).
             */
            @Override
            public final Dimension getPreferredSize() {
                Dimension d = super.getPreferredSize();
                Dimension prefSize = null;
                Component c = getParent();
                if (c == null) {
                    prefSize = new Dimension(
                            (int)d.getWidth(),(int)d.getHeight());
                } else if (c!=null &&
                        c.getWidth()>d.getWidth() &&
                        c.getHeight()>d.getHeight()) {
                    prefSize = c.getSize();
                } else {
                    prefSize = d;
                }
                int w = (int) prefSize.getWidth();
                int h = (int) prefSize.getHeight();
                // the smaller of the two sizes
                int s = (w>h ? h : w);
                return new Dimension(s,s);
            }
        };
        chessBoard.setBorder(new CompoundBorder(
                new EmptyBorder(8,8,8,8),
                new LineBorder(Color.BLACK)
        ));

        JPanel boardConstrain = new JPanel(new GridBagLayout());
        boardConstrain.add(chessBoard);
        gui.add(boardConstrain);

        // create the chess board squares
        Insets buttonMargin = new Insets(0, 0, 0, 0);
        for (int xIdx = 0; xIdx < NUMCOL; xIdx++) {
            for (int yIdx = 0; yIdx < NUMROW; yIdx++) {
                PositionButton button = new PositionButton(yIdx, xIdx, this.game.getBoardLimit());
                this.addButtonListener(button);
                button.setMargin(buttonMargin);
                ImageIcon icon = new ImageIcon(
                        new BufferedImage(ROWLENGTH, COLLENGTH, BufferedImage.TYPE_INT_ARGB));
                button.setIcon(icon);
                this.unsetButton(button);
                chessBoardGrid[yIdx][xIdx] = button;
            }
        }


        for (int ii = 0; ii < 8; ii++) {
            for (int jj = 0; jj < 8; jj++) {
                chessBoard.add(chessBoardGrid[jj][ii]);
            }
        }

    }

    public void resetFrame() {
        for(int xIdx = 0; xIdx < NUMCOL; xIdx++){
            for (int yIdx =0; yIdx < NUMCOL; yIdx++){
                chessBoardGrid[xIdx][yIdx].setIcon(new ImageIcon(
                        new BufferedImage(ROWLENGTH, COLLENGTH, BufferedImage.TYPE_INT_ARGB)));
            }
        }
        this.setupBoardPieces();
        this.frame.repaint();
        this.message.setText("White's turn.");
    }

    public final JComponent getGui() {
        return gui;
    }

    public void initializeFrame() {
        this.frame = new JFrame("ChessChamp");
        this.frame.add(this.getGui());
        // Ensures JVM closes after frame(s) closed and
        // all non-daemon threads are finished
        this.frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        // See http://stackoverflow.com/a/7143398/418556 for demo.
        this.frame.setLocationByPlatform(true);

        // ensures the frame is the minimum size it needs to be
        // in order display the components within it
        this.frame.pack();
        // ensures the minimum size is enforced.
        this.frame.setMinimumSize(this.frame.getSize());
        this.frame.setVisible(true);

    }

    public void addButtonListener(PositionButton button) {
        button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                int[] currentPositionArray = button.getPosition().getPositionArray();
                System.out.println("Clicked at " + currentPositionArray[0] + ", " + currentPositionArray[1]);
                if(currentPositionButton == null){
                    System.out.println("Set position");
                   currentPositionButton = button;
                   setButton(button);
                } else if(currentPositionButton.getPosition().isEqual(button.getPosition())){
                    System.out.println("Set to null");
                    unsetButton(button);
                    currentPositionButton = null;
                } else{
                    System.out.println("Move");
                    Position targetPosition = button.getPosition();
                    try {
                        boolean moveResult = game.move(currentPositionButton.getPosition(), targetPosition);
                        System.out.println("Move result " + moveResult);
                        unsetButton(currentPositionButton);
                        unsetButton(button);
                        if(moveResult){
                            moveImage(currentPositionButton.getPosition(), targetPosition);
                        }
                    } catch (Exception e) {
                        System.out.println("Caught");
                        e.printStackTrace();
                    }

                    currentPositionButton = null;
                }
            }
        });
    }

    /**
     * Changes the color of the button
     * @param button button to change color
     */
    public void setButton(PositionButton button){
        button.setBackground(Color.yellow);
    }

    public void unsetButton(PositionButton button) {
        int[] buttonPosition = button.getPosition().getPositionArray();
        if ((buttonPosition[1] % 2 == 1 && buttonPosition[0] % 2 == 1)
                || (buttonPosition[1] % 2 == 0 && buttonPosition[0] % 2 == 0)) {
            button.setBackground(Color.WHITE);
        } else {
            button.setBackground(Color.BLUE);
        }

    }
    /**
     * Moves the image from currentPosition to targetPosition
     * @param currentPosition
     * @param targetPosition
     */
    public void moveImage(Position currentPosition, Position targetPosition){
        if(this.game.getTurn()%2 == 0){
            this.message.setText("White's turn");
        }
        else{
            this.message.setText("Black's turn");
        }
        int[] currentPositionArray = currentPosition.getPositionArray();
        PositionButton currentPositionButton = this.chessBoardGrid[currentPositionArray[0]][currentPositionArray[1]];
        Icon currentIcon = currentPositionButton.getIcon();
        int[] targetPositionArray = targetPosition.getPositionArray();
        PositionButton targetPositionButton = this.chessBoardGrid[targetPositionArray[0]][targetPositionArray[1]];
        targetPositionButton.setIcon(currentIcon);
        ImageIcon icon = new ImageIcon(
                new BufferedImage(ROWLENGTH, COLLENGTH, BufferedImage.TYPE_INT_ARGB));
        currentPositionButton.setIcon(icon);
        this.frame.repaint();
        System.out.println("Repaint");
    }
    /**
     * Places the pieces on the board
     */
    private void setupBoardPieces(){
        for(Piece piece: this.game.getWhitePieces()){
            Image pieceImage = this.getImage(piece);
            int[] piecePositionArray = piece.getPosition().getPositionArray();
            chessBoardGrid[piecePositionArray[0]][piecePositionArray[1]].setIcon(new ImageIcon(pieceImage));
        }

        for(Piece piece: this.game.getBlackPieces()){
            Image pieceImage = this.getImage(piece);
            int[] piecePositionArray = piece.getPosition().getPositionArray();
            chessBoardGrid[piecePositionArray[0]][piecePositionArray[1]].setIcon(new ImageIcon(pieceImage));
        }
    }

    /**
     * Gets a corresponding image given the piece
     * @param piece
     */
    private Image getImage(Piece piece){
        PieceType type = piece.getPieceType();
        switch (type){
            case PAWN: return chessPiecesImages[piece.getUserId()][PAWN];
            case ROOK: return chessPiecesImages[piece.getUserId()][ROOK];
            case KNIGHT: return chessPiecesImages[piece.getUserId()][KNIGHT];
            case BISHOP: return chessPiecesImages[piece.getUserId()][BISHOP];
            case QUEEN: return chessPiecesImages[piece.getUserId()][QUEEN];
            case KING: return chessPiecesImages[piece.getUserId()][KING];
        }
        return null;
    }

    /**
     * Loads images from the chessPiecesImage folder
     */
    private void initializeImages() throws Exception{
        try{
            chessPiecesImages[WHITE][ROOK] = ImageIO.read(new File("./src/UserInterface/chessPiecesImage/whiteRook.png"));
            chessPiecesImages[WHITE][BISHOP] = ImageIO.read(new File("./src/UserInterface/chessPiecesImage/whiteBishop.png"));
            chessPiecesImages[WHITE][KNIGHT] = ImageIO.read(new File("./src/UserInterface/chessPiecesImage/whiteKnight.png"));
            chessPiecesImages[WHITE][QUEEN] = ImageIO.read(new File("./src/UserInterface/chessPiecesImage/whiteQueen.png"));
            chessPiecesImages[WHITE][KING] = ImageIO.read(new File("./src/UserInterface/chessPiecesImage/whiteKing.png"));
            chessPiecesImages[WHITE][PAWN] = ImageIO.read(new File("./src/UserInterface/chessPiecesImage/whitePawn.png"));

            chessPiecesImages[BLACK][ROOK] = ImageIO.read(new File("./src/UserInterface/chessPiecesImage/blackRook.png"));
            chessPiecesImages[BLACK][BISHOP] = ImageIO.read(new File("./src/UserInterface/chessPiecesImage/blackBishop.png"));
            chessPiecesImages[BLACK][KNIGHT] = ImageIO.read(new File("./src/UserInterface/chessPiecesImage/blackKnight.png"));
            chessPiecesImages[BLACK][QUEEN] = ImageIO.read(new File("./src/UserInterface/chessPiecesImage/blackQueen.png"));
            chessPiecesImages[BLACK][KING] = ImageIO.read(new File("./src/UserInterface/chessPiecesImage/blackKing.png"));
            chessPiecesImages[BLACK][PAWN] = ImageIO.read(new File("./src/UserInterface/chessPiecesImage/blackPawn.png"));
        } catch(Exception e){
            throw new Exception("Unable to load chess images");
        }
    }




    public static void main(String args[]) {
        // Default board configuration

        Runnable r = new Runnable() {

            @Override
            public void run() {
                try {

                    UserInterface cg = new UserInterface();
                    cg.initializeFrame();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        };
        // Swing GUIs should be created and updated on the EDT
        // http://docs.oracle.com/javase/tutorial/uiswing/concurrency
        SwingUtilities.invokeLater(r);

        // Smaller board
//        new UserInterface(5,5);
        //bigger board
//        new UserInterface(10,10);
//        String[] whiteCustomBackline = new String[] {"Qw", "Qw", "Qw", "Qw", "Kw", "Qw", "Qw", "Qw"};
//        String[] blackCustomBackline = new String[] {"Qb", "Qb", "Qb", "Qb", "Kw", "Qb", "Qb", "Qb"};
//        new UserInterface(blackCustomBackline, whiteCustomBackline, blackCustomBackline.length, blackCustomBackline.length);
    }
}
