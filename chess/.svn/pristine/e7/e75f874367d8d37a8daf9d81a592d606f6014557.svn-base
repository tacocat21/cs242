package Game;

import Piece.Piece;
import Board.Implementation.ChessBoard;
import Util.Position;
import Util.Score;

import java.util.ArrayList;


/**
 * Created by taccio on 2/13/17.
 */
public class ChessGame {

    private User user0;
    private User user1;
    private ArrayList<Piece> user0InitialPieceConfig;
    private ArrayList<Piece> user1InitialPieceConfig;
    private ChessBoard board;
    private int[] boardLimit;
    private int currentTurn = 0;
    private int userTurn = 0;
    private Score score;

    /**
     * Default constructor with default chess configuration
     * @throws Exception
     */
    public ChessGame() throws Exception {
        this.boardLimit = new int[] {8,8};
        this.user0 = new User(0);
        this.user1 = new User(1);
        this.board = new ChessBoard(user0.getLivePieceArray(), boardLimit);
        this.board.setPiece(user1.getLivePieceArray());
    }

    public ChessGame(int[] boardLimit, ArrayList<Piece> user0LivePieces, ArrayList<Piece> user0DeadPieces,
                     ArrayList<Piece> user1LivePieces, ArrayList<Piece> user1DeadPieces) throws Exception {
        this.boardLimit = boardLimit.clone();
        user0 = new User(0, this.boardLimit, user0LivePieces, user0DeadPieces);
        user1 = new User(1, this.boardLimit, user1LivePieces, user1DeadPieces);
        board = new ChessBoard(user0.getLivePieceArray(), boardLimit);
        board.setPiece(user1.getLivePieceArray());
    }

    public void resetGame() throws Exception {
        user0.reset();
        user1.reset();
        board.emptyBoard();
        board.setPiece(user0.getLivePieceArray());
        board.setPiece(user1.getLivePieceArray());
        this.currentTurn = 0;
        this.userTurn = 0;
    }

    public ArrayList<Piece> getWhitePieces(){
       return user0.getLivePieces();
    }

    public ArrayList<Piece> getBlackPieces(){
        return user1.getLivePieces();
    }

    public int[] getBoardLimit(){
        return this.board.getLimit();
    }

    public boolean move(Position currentPosition, Position targetPosition) throws Exception {
        // moving out of turn
        Piece currentPiece = this.board.getPiece(currentPosition);
        if(currentPiece == null){
            return false;
        }
        if(currentPiece.getUserId() != this.currentTurn%2){
            return false;
        }
        User currentUser = getUserFromTurn();
        User opponentUser = getOpponentFromTurn();
        this.board.removePiece(currentPosition);
        if(this.board.check(currentUser.getKing().getPosition(), opponentUser.getLivePieces())){
            this.board.setPiece(currentPiece);
            return false;
        }
        this.board.setPiece(currentPiece);
        Piece targetPiece = this.board.move(currentPiece, targetPosition);
        opponentUser.killPiece(targetPiece);
        return true;
    }

    /**
     *
     * @return true if the current user is in check
     */
    public boolean isInCheck() throws Exception {
        User currentUser = getUserFromTurn();
        User opponentUser = getOpponentFromTurn();
        return this.board.check(currentUser.getKing().getPosition(), opponentUser.getLivePieces());
    }

    public boolean isInCheckMate() throws Exception {
        User currentUser = getUserFromTurn();
        User opponentUser = getOpponentFromTurn();
        return this.board.checkMate(currentUser.getKing(), opponentUser.getLivePieces());
    }

    /**
     * @return the user able to move at current turn
     */
    public User getUserFromTurn() {
        if(this.currentTurn%2 ==0 ){
            return this.user0;
        }
        return this.user1;
    }

    /**
     * @return the opponent at the current turn
     */
    public User getOpponentFromTurn() {
        if(this.currentTurn%2 ==0 ){
            return this.user1;
        }
        return this.user0;
    }

    /**
     * Increments the current turn
     */
    public void nextTurn() {
        this.currentTurn++;
    }

    public ChessBoard getBoard() {
        return this.board;
    }

    public int getTurn() {
        return this.currentTurn;
    }


}
