import datetime
import src.constants as constants

class Poll:
    def __init__(self,
                 poll_id: str,
                 poll_type:str,
                 question: str,
                 answer,
                 possible_answers=None):
        """
        
        :param poll_id: _id of the poll
        :param poll_type: type of poll
        :param question: question of the poll
        :param answer: answer to the poll
        :param possible_answers: possible multiple choice answers
        """
        self.question = question
        self.poll_type = poll_type
        self.answer = str(answer)
        self.id = poll_id
        self.possible_answers = possible_answers
        self.student_result = {}
        self.num_correct = 0
        self.num_response = 0

    def add_poll_result_from_student(self, response_dict):
        """
        Add result to cache
        :param response_dict: student response dictionary 
        :return: the updated response_dict or None if an error occurs
        """
        try:
            student_id = response_dict['student_id']
            student_school_id = response_dict['school_id']
            student_name = response_dict['name']
            student_response = response_dict['response']
        except Exception as err:
            print(err)
            return None
        if student_id in self.student_result:
            return self.student_result[student_id]
        is_correct = True
        if self.poll_type == constants.MC_POLL_TYPE or self.poll_type == constants.INT_POLL_TYPE:
            is_correct = student_response == self.answer
        if is_correct is True:
            self.num_correct += 1
        self.num_response += 1
        result = {'time': str(datetime.datetime.now().time()),
                  'response': student_response,
                  '_id': student_id,
                  'school_id':student_school_id,
                  'name': student_name,
                  'is_correct': is_correct
                  }
        self.student_result[student_id] = result
        return result

    def get_id(self):
        """
        
        :return: id of the poll
        """
        return self.id

    def get_poll_dict(self):
        """
        
        :return: dictionary summary of the poll
        """
        result_dict = {'question':self.question,
                       'answer':self.answer,
                       'student_responses':self.student_result}
        return result_dict

    def get_student_responses(self):
        """
        
        :return: dictionary containing student responses
        """
        return self.student_result